// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Picker > Editor",
    "bindings": {
      "ctrl-j": "menu::SelectNext",
      "ctrl-k": "menu::SelectPrevious",
      "ctrl-v": "pane::SplitRight",
      "ctrl-h": "pane::SplitDown"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      // Some of these keymaps are the same as the defaults, i copied them here
      // so i can remember them

      // Windows and splits
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-shift-h": "workspace::SwapPaneLeft",
      "ctrl-shift-l": "workspace::SwapPaneRight",
      "ctrl-shift-k": "workspace::SwapPaneUp",
      "ctrl-shift-j": "workspace::SwapPaneDown",
      "space |": "pane::SplitRight",
      "space -": "pane::SplitDown",
      "shift-l": "pane::ActivateNextItem",
      "shift-h": "pane::ActivatePreviousItem",
      "ctrl-w ctrl-n": "workspace::NewFileSplitHorizontal",
      "ctrl-w ctrl-d": "editor::GoToTypeDefinitionSplit",
      "space w m": "workspace::ToggleZoom",

      // Navigation
      "s": ["vim::PushSneak", {}],
      "shift-s": ["vim::PushSneakBackward", {}],

      // Text manipulation
      "alt-k": "editor::MoveLineUp",
      "alt-up": "editor::MoveLineUp",
      "alt-j": "editor::MoveLineDown",
      "alt-down": "editor::MoveLineDown",

      // Buffers
      "space `": ["workspace::SendKeystrokes", "ctrl-tab enter"], // Hack to toggle buffers
      "space b x": "pane::CloseActiveItem", // Delete current buffer
      "space b b": "tab_switcher::Toggle", // Open buffer list
      "space b d": "pane::CloseAllItems", // Close all buffers
      "space b o": "workspace::CloseInactiveTabsAndPanes", // Close all buffers except the active one
      "space b r": "pane::CloseItemsToTheRight", // Close all buffers to the right of the active one
      "space b l": "pane::CloseItemsToTheLeft", // Close all buffers to the left of the active one
      "space b p": "pane::TogglePinTab",

      // Search
      "space space": "file_finder::Toggle", // Open file picker
      "space p": "command_palette::Toggle", // Open command palette
      "space f o": "outline::Toggle",
      "space s s": "project_symbols::Toggle",
      "space s r": ["pane::DeploySearch", { "replace_enabled": true }], // Open search and replace for workspace
      "space s a": "search::SelectAllMatches", // Activate multi cursor on all matches
      "g s": "outline::Toggle",
      "g shift-s": "project_symbols::Toggle",
      "g /": ["buffer_search::Deploy", { "replace_enabled": true }],

      // Files
      "space n f": "workspace::NewFile",
      "space n v": "workspace::NewFileSplitVertical",
      "space n h": "workspace::NewFileSplitHorizontal",
      "space n l": "language_selector::Toggle", // [n]ew [l]anguage

      // Code
      "g .": "editor::ToggleCodeActions",
      "space c a": "editor::ToggleCodeActions",
      "space c f": "editor::Format",
      "space c s": "workspace::SaveWithoutFormat",
      "space c r": "editor::Rename",
      "ctrl-space": "editor::SelectLargerSyntaxNode",
      "ctrl-backspace": "editor::SelectSmallerSyntaxNode",
      "ctrl-y": "editor::ConfirmCompletion",

      // Git
      "space g g": "git_panel::ToggleFocus",
      "space g b": "git::Blame",
      "space g s": "git::Branch", // [g]it [s]witch
      "space g h": "editor::ToggleSelectedDiffHunks",
      "space g r": "git::Restore", // [g]it [r]evert
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPreviousHunk",

      // Diagnostics
      "space x x": "diagnostics::Deploy", // Go to diagnostics panel
      "[ d": "editor::GoToDiagnostic",
      "] d": "editor::GoToPreviousDiagnostic",

      // Panels
      "space e": "project_panel::ToggleFocus",
      "space d d": "workspace::CloseAllDocks",
      "space d b": "workspace::ToggleBottomDock",
      "space d l": "workspace::ToggleLeftDock",
      "space d r": "workspace::ToggleRightDock",

      // Terminal
      "space t t": "workspace::NewCenterTerminal",

      // Toggles
      "space u w": "editor::ToggleSoftWrap",
      "space u l": "editor::ToggleLineNumbers",
      "space u shift-l": "editor::ToggleRelativeLineNumbers",
      "space u h": "editor::ToggleInlayHints",
      "space u g": "editor::ToggleIndentGuides",

      // Assistant
      "space a i": "assistant::InlineAssist",
      "space a /": "agent::ToggleFocus"
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {}
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      // "j k": "vim::NormalBefore" // remap jk in insert mode to escape.
    }
  },
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      "f": "file_finder::Toggle",
      "c": "zed::OpenSettings",
      "k": "zed::OpenKeymap"
      // put key-bindings here (in addition to above) if you want them to
      // work when no editor exists
      // "space f": "file_finder::Toggle"
    }
  },
  {
    "context": "vim_operator == c",
    "bindings": {
      "r": "editor::Rename"
    }
  },
  {
    "context": "VimControl && ProjectPanel && not_editing",
    "bindings": {
      "k": "menu::SelectPrevious",
      "j": "menu::SelectNext",
      "h": "project_panel::CollapseSelectedEntry",
      "l": "project_panel::ExpandSelectedEntry",
      "o": "project_panel::Open",
      "shift-o": "project_panel::OpenWithSystem",
      "a": "project_panel::NewFile",
      "shift-a": "project_panel::NewDirectory",
      "z": "workspace::ToggleLeftDock",
      "space e": "workspace::ToggleLeftDock",
      "ctrl-l": "workspace::MoveFocusedPanelToNextPosition"
    }
  },
  {
    "context": "menu",
    "bindings": {
      "ctrl-j": "menu::SelectNext",
      "ctrl-k": "menu::SelectPrevious"
    }
  },
  {
    "context": "(Dock || KeyContextView || Editor) && !menu",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      "ctrl-space": ["vim::PushAddSurrounds", {}]
    }
  }
]
